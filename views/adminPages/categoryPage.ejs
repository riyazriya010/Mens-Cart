<!------ header from partials ------>

<%- include("../adminPartials/header") %>

  <style>
    .table-dark-bordered {
      border: 1px solid #000;
      /* Dark border color for the table */
    }

    .table-dark-bordered th,
    .table-dark-bordered td {
      border: 1px solid #000;
      /* Dark border color for table headers and cells */
    }

    .full-width-button {
            color: white;
            background-color: #295f4e;
            border: 1px solid #295f4e;
            /* border-radius: 2px; */
            width: 100%; /* Makes the button take full width */
            padding: 6px; /* Optional: Adds padding inside the button */
            box-sizing: border-box; /* Ensures padding and border are included in the width */
        }
        .full-width-Add {
            color: white;
            background-color: #295f4e;
            border: 1px solid #295f4e;
            /* border-radius: 2px; */
            width: 20%; /* Makes the button take full width */
            padding: 6px; /* Optional: Adds padding inside the button */
            box-sizing: border-box; /* Ensures padding and border are included in the width */
        }
        .full-width-modal {
            color: white;
            background-color: #295f4e;
            border: 1px solid #295f4e;
            /* border-radius: 2px; */
            width: 40%; /* Makes the button take full width */
            padding: 6px; /* Optional: Adds padding inside the button */
            box-sizing: border-box; /* Ensures padding and border are included in the width */
        }
  </style>

  <body style="color: whitesmoke;">



    <!---- breadcrumbs ---->
    <div class="container-fluid">
      <div class="row justify-content-end" style="background-color: #e2e2e2;height: 30px;">

        <div class="col-7 col-md-7 col-lg-9">
          <h5>Category</h5>
        </div>

        <div class="col-5 col-md-4 col-lg-2">
          <nav aria-label="breadcrumb" style="margin-left: -40%;">
            <ol class="breadcrumb">

              <li class="breadcrumb-item " aria-current="page">
                <a href="/dashboard" style="text-decoration: none;color: black;">Dashboard</a>
              </li>

              <li class="breadcrumb-item active" aria-current="page">
                Category
              </li>

            </ol>
          </nav>
        </div>
      </div>

    </div>



    <!------ main content ----->

    <div class="container mt-4">

      <div class="row">
        <div class="col">

          
          <div style="display: flex;justify-content: space-between;">
            <button class="mb-2 full-width-Add" data-bs-toggle="modal" data-bs-target="#add-cat">
            Add Category</button>

            <a href="/admin/categoryOffer"><button class="full-width-button">Category Offer Management</button></a>
          </div>

          <div class="row mb-2">
            <div class="col-6">

              <form class="input-group" action="/category/search" method="GET"
                style="box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);width: 250px;">
                <input type="text" name="searchQuery" class="form-control" placeholder="search for product"
                  aria-describedby="basic-addon2" required style="border: white;border-radius: 3px;margin-top: 2px;">
                <button type="submit" class="input-group-addon"
                  style="border: white;background-color: white;border-radius: 3px;width: 40px;margin-left: -4px;margin-top: 2px;"><i
                    class="fa-solid fa-magnifying-glass"></i></button>
              </form>

            </div>
          </div>



          <div class="row mt-3">
            <div class="col">
              <div class="table-responsive">


                <table class="table table-hover text-center align-middle">
                        <thead class=" table-dark">
                  <tr>
                    <th>Category</th>
                    <th>Description</th>
                    <th>List/Unlist</th>
                    <th>Actions</th>
                    <th>Delete</th>
                  </tr>
                  </thead>
                  <tbody>
                    <% categoryData.forEach(category=> { %>
                      <tr>
                        <td>
                          <%= category.categoryName %>
                        </td>
                        <td>
                          <%= category.categoryDescription %>
                        </td>

                        <td>
                          <% if (category.isListed) { %>
                            <button class="full-width-button" onclick="unList('<%= category._id %>')">Unlist</button>
                            <% } else { %>
                              <button class="full-width-button" onclick="List('<%= category._id %>')">List</button>
                              <% } %>
                        </td>

                        <td>
                          <a href="/category?editId=<%= category._id %>">
                            <button class="full-width-button" data-bs-toggle="modal" data-bs-target="#edit-cat" type="button">
                              Edit</button>
                          </a>
                        </td>

                        <td>
                          <button type="button" onclick="deleteCategory('<%= category._id %>')"
                            style="background-color: rgb(234, 71, 71);border: 1px solid rgb(234, 71, 71);color: white;border-radius: 4px;">
                            <i class="fa-sharp fa-solid fa-trash"></i>
                          </button>
                        </td>
                      </tr>
                      <% }) %>

                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>



    <!---- pagination ---->
    <nav aria-label="pagination">
      <ul class="pagination justify-content-center">
        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
          <a href="/category?page=<%= currentPage - 1 %>" class="page-link" aria-label="Previous"
            style="background-color: black;">
            <span aria-hidden="true" style="color: white;">&laquo;</span>
          </a>
        </li>
        <li class="page-item">
          <span class="page-link" style="background-color: #a49b9b; color: black;">
            <%= currentPage %>
          </span>
        </li>
        <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
          <a href="/category?page=<%= currentPage + 1 %>" class="page-link" aria-label="Next"
            style="background-color: black;">
            <span aria-hidden="true" style="color: white;">&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>






    <!------ add cat modal ------>
    <div class="modal" tabindex="-1" id="add-cat">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add Category</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <!-- <p>Modal body text goes here.</p> -->
            <!-- <form action="/categoryAdd" method="post" id="addCategoryForm"> -->
            <form id="addCategoryForm">
              <div class="form-group mt-3 mb-3">
                <label for="category">Category</label>
                <input type="text" name="categoryname" class="form-control" id="category" />
              </div>

              <div class="form-group mt-3 mb-3">
                <label for="cat-description">Description</label>
                <textarea name="categorydescription" class="form-control" id="cat-description" rows="3"></textarea>
              </div>

              <hr>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" class="full-width-modal">Add</button>
            </form>
          </div>
          <!-- <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary">Save changes</button>
            </div> -->
        </div>
      </div>
    </div>



    <!------- edit cat modal ----->
    <% if(categoryToEdit) { %>
      <div class="modal" tabindex="-1" id="edit-cat" style="display: block;">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Edit Category</h5>
              <a href="/category" style="margin-left: auto;">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </a>
            </div>
            <div class="modal-body">
              <!-- <p>Modal body text goes here.</p> -->
              <!-- <form action="/category/edit/<%= categoryToEdit._id %>?_method=PUT" method="post" id="editCategoryForm"> -->
              <form id="editCategoryForm">
                <div class="form-group mt-3 mb-3">
                  <label for="category">Category</label>
                  <input type="text" name="categoryName" class="form-control" id="category"
                    value="<%= categoryToEdit.categoryName %>" />
                </div>

                <div class="form-group mt-3 mb-3">
                  <label for="cat-description">Description</label>
                  <textarea name="categoryDescription" class="form-control" id="cat-description" rows="3">
                    <%= categoryToEdit.categoryDescription %>
                  </textarea>
                </div>

                <input type="hidden" name="categoryId" value="<%= categoryToEdit._id %>">

                <hr>
                <a href="/category">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </a>
                <button type="submit" class="full-width-modal">Save Changes</button>
              </form>
            </div>
          </div>
        </div>
      </div>
      <% } %>


        <!----- foooter from partials ---->
        <%- include("../adminPartials/footer") %>

          <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

          <script>
            // Function to handle category deletion
            function deleteCategory(id) {
              Swal.fire({
                title: 'Are you sure?',
                text: 'You will not be able to recover this category!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
              }).then((result) => {
                if (result.isConfirmed) {
                  fetch(`/category/delete/${id}?_method=DELETE`, {
                    method: 'POST', // Using POST to support forms without JavaScript
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.success) {
                        Swal.fire('Deleted!', 'Category has been deleted.', 'success')
                          .then((result) => {
                            window.location.reload()
                          })
                        // Optionally, you can remove the row from the table on success
                        // document.getElementById(`row-${id}`).remove();
                        // window.location.href='/category'
                      } else {
                        Swal.fire('Error', 'Failed to delete category', 'error');
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      Swal.fire('Error', 'There was a problem with your request.', 'error');
                    });
                }
              });
            }



            // Add Category Form Validation and Submission
            $(document).ready(function () {
              $('#addCategoryForm').validate({
                rules: {
                  categoryname: {
                    pattern: /^[a-zA-Z]+(?:[- ][a-zA-Z]+)*$/,
                    required: true
                  },
                  categorydescription: {
                    // pattern:/^[a-zA-Z]+(?: [a-zA-Z]+)*$/,
                    required: true
                  }
                },
                messages: {
                  categoryname: {
                    required: "Category name is required."
                  },
                  categorydescription: {
                    required: "Category description is required."
                  }
                },
                submitHandler: function (form) {
                  const formData = {
                    categoryname: form.categoryname.value,
                    categorydescription: form.categorydescription.value
                  };

                  fetch('/categoryAdd', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.categoryExist) {
                        Swal.fire('Category Already Exist', '', 'error');
                      } else if (data.success) {
                        Swal.fire({
                          title: 'Category Saved Successfully',
                          icon: 'success',
                          showConfirmButton: false,
                          timer: 1500
                        }).then(() => {
                          window.location.href = '/category';
                        });
                      } else {
                        Swal.fire('Error', 'Failed to add category', 'error');
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      Swal.fire('Error', 'There was a problem with your request.', 'error');
                    });
                }
              });
            });





            // Edit Category Form Validation and Submission
            $(document).ready(function () {
              $('#editCategoryForm').validate({
                rules: {
                  categoryName: {
                    pattern: /^[a-zA-Z]+(?:[- ][a-zA-Z]+)*$/,
                    required: true
                  },
                  categoryDescription: {
                    // pattern:/^[a-zA-Z]+(?: [a-zA-Z]+)*$/,
                    required: true
                  }
                },
                messages: {
                  categoryName: {
                    required: "Category name is required to update."
                  },
                  categoryDescription: {
                    required: "Category description is required to update."
                  }
                },
                submitHandler: function (form) {
                  const formData = {
                    categoryName: form.categoryName.value,
                    categoryDescription: form.categoryDescription.value,
                    categoryId: form.categoryId.value
                  };
                  console.log(formData);

                  // Submit form data using fetch
                  fetch(`/category/edit/${formData.categoryId}?_method=PUT`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.success) {
                        console.log('success');
                        // Sweet Alert for success
                        Swal.fire('Category Edited Successfully', '', 'success').then(() => {
                          // Redirect to category page after success
                          window.location.href = '/category';
                        });
                      } else if (data.categoryExist) {
                        // Sweet Alert for category already exists
                        Swal.fire('Error', 'Category name already exists', 'error');
                      } else {
                        // Sweet Alert for other errors
                        Swal.fire('Error', data.message || 'Failed to edit category', 'error');
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      Swal.fire('Error', 'There was a problem with your request.', 'error');
                    });
                }
              });
            });
          </script>


          <script>
            async function unList(categoryId) {
              let response = await fetch(`/admin/category/unList?categoryId=${categoryId}`, {
                method: 'PUT',
              });
              let result = await response.json();
              if (result.success) {
                await Swal.fire({
                  icon: "success",
                  title: "Category unListed",
                  confirmButtonText: "OK",
                });
                window.location.reload();
              } else if (result.userNotExist) {
                Swal.fire('Category does not exist', '', 'error');
              }
            }

            async function List(categoryId) {
              let response = await fetch(`/admin/category/list?categoryId=${categoryId}`, {
                method: 'PUT',
              });
              let result = await response.json();
              if (result.success) {
                await Swal.fire({
                  icon: "success",
                  title: "Category Listed",
                });
                window.location.reload();
              } else if (result.userNotExist) {
                Swal.fire('Category does not exist', '', 'error');
              }
            }
          </script>

  </body>