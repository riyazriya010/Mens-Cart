<%- include('../adminPartials/header') %>

<style>
  .cropped-image-wrapper {
    display: inline-block;
    position: relative;
    margin: 10px;
    overflow: hidden;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.cropped-image {
    display: block;
    max-width: 100%;
    height: auto;
}

.drop-button {
    position: absolute;
    top: 5px;
    right: 5px;
}
</style>

<body>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-12 col-sm-12 col-md-8 col-lg-6">
        <div class="card">
          <h3 class="card-header text-center">Edit</h3>
          <div class="card-body">
            <form id="editProductForm">
              <div class="form-group mt-3 mb-3">
                <label for="prod-name">Product Name</label>
                <input type="text" name="productName" class="form-control" id="prod-name" value="<%= productData.productName %>" />
              </div>

              <div class="form-group mt-3 mb-3">
                <label for="prod-cat">Product Category</label>
                <input type="text" name="productCategory" class="form-control" id="prod-cat" value="<%= productData.parentCategory.categoryName %>" />
              </div>

              <div class="form-group mt-3 mb-3 d-flex">
                <% for(let j=0; j<productData.productImage.length; j++) { %>
                <div class="d-flex flex-column">
                  <img src="/assets/uploadimages/uploads/<%= productData.productImage[j] %>" style="height: 70px; width: 60px; border-radius: 0; margin-left: 5px;">
                  <div class="mt-2">
                    <button style="margin-bottom: 2%; background-color: rgb(236, 98, 98); border: 1px solid red; border-radius: 3px;" onclick="deleteImage(event, '<%= productData._id %>', '<%= j %>')">
                      delete
                    </button>
                  </div>
                </div>
                <% } %>
              </div>

              <div class="form-group mt-3 mb-3">
                <label for="prod-img">Product Images</label>
                <input type="file" name="images" id="prod-img" multiple accept="image/*">
                <div id="croppedImagesContainer" class="mt-3"></div>
              </div>

              <div class="form-group mt-3 mb-3">
                <label for="prod-price">Product Price INR</label>
                <input type="text" name="productPrice" class="form-control" id="prod-price" value="<%= productData.productPrice %>" />
              </div>

              <div class="form-group mt-3 mb-3">
                <label for="In-stock">In-stock</label>
                <input type="text" name="stock" class="form-control" id="In-stock" value="<%= productData.productStock %>" />
              </div>

              <input type="hidden" name="productId" value="<%= productData._id %>">
              <hr>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Cropper.js Modal -->
  <div class="modal" tabindex="-1" id="cropper-modal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <img id="image" style="max-width: 50%; height: 50%;" />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" id="crop-button" class="btn btn-primary">Crop</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Include Cropper.js and jQuery Validation -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    $(document).ready(function () {
      let cropper;
      const image = document.getElementById('image');
      const inputFile = document.getElementById('prod-img');
      let croppedImages = [];
      let files = [];
      let croppedFiles = [];
      let currentFileIndex = 0;

      inputFile.addEventListener('change', function (event) {
        files = Array.from(event.target.files);
        if (files.length > 0) {
          currentFileIndex = 0;
          loadImageForCropping(files[currentFileIndex]);
        }
      });

      function loadImageForCropping(file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          image.src = e.target.result;
          $('#cropper-modal').modal('show');
        };
        reader.readAsDataURL(file);
      }

      $('#cropper-modal').on('shown.bs.modal', function () {
        cropper = new Cropper(image, {
          aspectRatio: NaN,
          autoCropArea: 1,
          movable: false,
          zoomable: false,
          viewMode: 1
        });
      }).on('hidden.bs.modal', function () {
        cropper.destroy();
        cropper = null;
      });

      $('#crop-button').on('click', function () {
  const croppedCanvas = cropper.getCroppedCanvas();
  if (croppedCanvas) {
    croppedCanvas.toBlob(function (blob) {
      const croppedImageFile = new File([blob], `cropped_image_${currentFileIndex}.png`, {
        type: 'image/png'
      });
      croppedFiles.push(croppedImageFile);
      addCroppedImageToContainer(URL.createObjectURL(croppedImageFile), croppedFiles.length - 1);
      $('#cropper-modal').modal('hide');
      currentFileIndex++;
      if (currentFileIndex < files.length) {
        loadImageForCropping(files[currentFileIndex]);
      } else {
        // Remove the original files from the input element
        inputFile.files = croppedFiles;
        files = [];
      }
    });
  }
});

      function addCroppedImageToContainer(src, index) {
        const container = document.getElementById('croppedImagesContainer');
        const imageWrapper = document.createElement('div');
        imageWrapper.classList.add('cropped-image-wrapper');

        imageWrapper.style.width = '150px';  // Set desired width
        imageWrapper.style.height = '150px'; 

        const img = document.createElement('img');
        img.src = src;
        img.classList.add('cropped-image');
        const dropButton = document.createElement('button');
        dropButton.textContent = 'Drop';
        dropButton.classList.add('btn', 'btn-danger', 'btn-sm', 'drop-button');
        dropButton.addEventListener('click', function () {
          container.removeChild(imageWrapper);
          croppedImages.splice(index, 1);
          removeFileFromInput(index);
        });
        imageWrapper.appendChild(img);
        imageWrapper.appendChild(dropButton);
        container.appendChild(imageWrapper);
      }

      function removeFileFromInput(index) {
        const dataTransfer = new DataTransfer();
        files.splice(index, 1);
        files.forEach(file => {
          dataTransfer.items.add(file);
        });
        inputFile.files = dataTransfer.files;
      }

      $('#editProductForm').validate({
        rules: {
          productName: {
            required: true,
            pattern: /^[a-zA-Z]+(?:[- ][a-zA-Z]+)*$/
          },
          productCategory: {
            pattern: /^[a-zA-Z]+(?:[- ][a-zA-Z]+)*$/,
            required: true
          },
          productPrice: {
            pattern: /^\d{1,}$/,
            required: true,
            number: true
          },
          stock: {
            pattern: /^\d{1,}$/,
            required: true,
            digits: true
          },
          images: {
            required: function () {
              return $("#prod-img")[0].files.length === 0 && $(".flex-column").length === 0;
            }
          }
        },
        messages: {
          images: {
            required: "Please select at least one image if no existing images are present."
          }
        },
        submitHandler: async function (form, event) {
          event.preventDefault();
          try {
            const formData = new FormData(form);
            croppedImages.forEach((image) => {
              formData.append('images', image);
            });

            const productId = form.querySelector('input[name="productId"]').value;

            const response = await fetch(`/admin/editProductVerify/${productId}`, {
              method: 'PUT',
              body: formData
            });
            const data = await response.json();
            if (data.productExist) {
              Swal.fire('Product Already Exist', '', 'error');
            } else if (data.success) {
              await Swal.fire({
                title: 'Product Edited Successfully',
                icon: 'success',
                showConfirmButton: false,
                timer: 1500
              });
              window.location.href = '/admin/product';
            } else {
              throw new Error('Product not found');
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error', error.message || 'There was a problem with your request.', 'error');
          }
        }
      });
    });

    async function deleteImage(event, productId, imageIndex) {
      event.preventDefault();
      let confirmDelete = await Swal.fire({
        icon: 'warning',
        title: 'Are you sure?',
        text: 'This action cannot be undone.',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if (confirmDelete.isConfirmed) {
        try {
          let response = await fetch(`/admin/productImage/delete?productId=${productId}&imageIndex=${imageIndex}`, {
            method: 'PATCH'
          });
          let data = await response.json();
          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Image Deleted',
              text: 'The image was successfully deleted.'
            });
            event.target.closest('.flex-column').remove();
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Deletion Failed',
              text: 'Failed to delete the image. Please try again.'
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while deleting the image. Please try again later.'
          });
          console.error('Error:', error);
        }
      }
    }
  </script>

  <%- include('../adminPartials/footer') %>
</body>