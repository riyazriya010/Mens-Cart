<%- include("../userPartials/header") %>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .breadcrumb-item+.breadcrumb-item::before {
            content: ">";
        }

        .quantity-control {
            display: flex;
            align-items: center;
        }

        .quantity-control button {
            background-color: #ccc;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }

        .quantity-control input {
            width: 40px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin: 0 5px;
        }

        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 15px 0;
        }

        .cart-item img {
            max-width: 100px;
            max-height: 100px;
        }

        .cart-item-details {
            flex: 1;
            padding-left: 15px;
        }

        .cart-item-actions {
            display: flex;
            flex-direction: column;
            align-items: end;
            justify-content: space-between;
        }

        .cart-item-actions .btn-link {
            padding: 0;
        }

        .full-width-button {
            color: white;
            background-color: #295f4e;
            border: 1px solid #295f4e;
            /* border-radius: 2px; */
            width: 100%;
            /* Makes the button take full width */
            padding: 6px;
            /* Optional: Adds padding inside the button */
            box-sizing: border-box;
            /* Ensures padding and border are included in the width */
        }
    </style>

    <body>



        <!-- Breadcrumbs -->
        <div class="container-fluid">
            <div class="row justify-content-end" style="background-color: #e2e2e2; height: 30px;">
                <div class="col-7 col-md-7 col-lg-9">
                    <h5>Cart</h5>
                </div>
                <div class="col-5 col-md-4 col-lg-2">
                    <nav aria-label="breadcrumb" style="margin-left: -40%;">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item" aria-current="page">
                                <a href="#" style="text-decoration: none; color: black;">Home</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">Cart</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>




        <!-- Main content -->
        <div class="container mt-4" id="deleteUpdate">
            <div class="row" id="total-cart">

                <% if (cartData && cartData.length> 0) { %>

                    <!-- Sidebar -->
                    <!-- Sidebar -->
                    <div class="col-lg-3 order-lg-2 mb-4">
                        <div class="card">
                            <div class="card-body" id="total">
                                <h5>Grand Total (<span id="totalItems">
                                        <%= totalItems %>
                                    </span> items):</h5>
                                <h5 id="grandTotal">INR <%= grandTotal.toFixed(2) %>
                                </h5>
                                <button class="full-width-button"
                                    onclick="proceed('<%= grandTotal.toFixed(2) %>')">Proceed to Checkout</button>
                            </div>
                        </div>
                    </div>

                    <!-- Cart Items -->
                    <div class="col-lg-9 order-lg-1" id="updateCart">
                        <h4>Shopping Cart</h4>
                        <button class="btn btn-link" style="color: green;" onclick="deleteAll(event)">Deselect all
                            items</button>

                        <% if (outOfStockItems && outOfStockItems.length> 0) { %>
                            <div class="alert alert-warning">
                                <h5>Some items have been updated due to insufficient stock:</h5>
                                <ul>
                                    <% outOfStockItems.forEach(item=> { %>
                                        <li>
                                            <%= item.productName %>: Requested <%= item.requestedQuantity %>, Available
                                                    <%= item.availableQuantity %>
                                        </li>
                                        <% }) %>
                                </ul>
                            </div>
                            <% } %>

                                <% for(let i=0; i < cartData.length; i++) { %>
                                    <div class="cart-item d-flex flex-wrap align-items-center" id="cartProduct<%= i %>">
                                        <div class="me-2">
                                            <img src="/assets/uploadimages/uploads/<%= cartData[i].productId.productImage[0] %>"
                                                alt="" style="max-width: 40%; max-height: 40%;">
                                        </div>

                                        <div class="cart-item-details flex-grow-1" id="update">
                                            <h5>
                                                <%= cartData[i].productId.productName %>
                                            </h5>

                                            <% if(cartData[i].productId.productStock===0) { %>
                                                <p style="color: red;">Out Of Stock</p>
                                                <% } else if(cartData[i].productId.productStock> 3) { %>
                                                    <p style="color: green;">In Stock</p>
                                                    <% } else { %>
                                                        <p style="color: red;">Less Stock</p>
                                                        <% } %>

                                                            <% if(cartData[i].productId.productStock !==0) { %>
                                                                <div class="quantity-control mb-2">
                                                                    <button id="decrease"
                                                                        onclick="decrement('<%= i %>', '<%= cartData[i].productId._id %>')">-</button>
                                                                    <input type="text" id="productQuantity<%= i %>"
                                                                        value="<%= cartData[i].productQuantity %>">
                                                                    <button id="increase"
                                                                        onclick="increment('<%= cartData[i].productId.productStock %>', '<%= i %>', '<%= cartData[i].productId._id %>')">+</button>
                                                                </div>
                                                                <% } %>
                                        </div>
                                        <div class="cart-item-actions d-flex flex-column align-items-end"
                                            id="subUpdate">
                                            <div class="mb-2" style="font-weight: bold;">INR <%=
                                                    cartData[i].totalCostPerProduct %>
                                            </div>
                                            <button class="btn btn-link" style="color: red; margin-top: 106%;"
                                                onclick="deleteProduct(event, '<%= cartData[i].productId._id %>', '<%= cartData[i].productId.productName %>')">
                                                <i class="fa-sharp fa-solid fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <% } %>

                                        <% } else { %>
                                            <!-- <h5 class="text-center">No products available in your cart</h5> -->
                                            <script>
                                                window.location.href = '/cart/emptyCart'
                                            </script>

                                            <% } %>
                    </div>


            </div>
        </div>

        <%- include("../userPartials/footer") %>

            <script src="../../js/cart.js"></script>



            <!----- delete particulart item ---->

            <script>
                async function deleteProduct(event, productId, productName) {
                    event.preventDefault();

                    try {
                        // Show confirmation alert
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: `You won't be able to revert this! Delete ${productName}?`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!'
                        });

                        if (result.isConfirmed) {
                            // Proceed with deletion
                            const response = await fetch(`/cart/deleteCart?productId=${productId}`, {
                                method: 'DELETE'
                            });

                            const result = await response.json();

                            if (result.success && result.cartEmpty) {
                                // Show success alert
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: `${productName} has been removed from your cart.`,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    // Redirect to the cart page after successful deletion
                                    window.location.href = '/cart/emptyCart';
                                    // $('#deleteUpdate').load('/cart #deleteUpdate > *');
                                });
                            } else if (result.success) {
                                // Show success alert
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: `${productName} has been removed from your cart.`,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    // Redirect to the cart page after successful deletion
                                    // window.location.href = '/cart/emptyCart';
                                    $('#deleteUpdate').load('/cart #deleteUpdate > *');
                                });
                            } else {
                                // Handle errors if any
                                console.error('Failed to delete product');
                            }
                        }
                    } catch (error) {
                        console.error(error.message);
                        res.render('500')
                    }
                }
            </script>


            <script>
                async function deleteAll(event) {
                    event.preventDefault();

                    try {
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: 'Do you want to delete all products?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete them!',
                            cancelButtonText: 'No, keep them'
                        });

                        if (result.isConfirmed) {
                            const response = await fetch(`/deleteAll`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                window.location.href = '/cart';
                            } else {
                                console.error('Failed to delete the products');
                                Swal.fire('Error', 'Failed to delete the products', 'error');
                            }
                        }
                    } catch (error) {
                        console.error(error.message);
                        window.location.href = '/500'; // Redirect to error page
                    }
                }
            </script>



            <!------ increase product ---->

            <!-- <script>
                async function increment(productStock, index, productId) {
                    try {
                        const response = await fetch(`/cart/increase?productId=${productId}`, {
                            method: 'PUT'
                        });

                        const result = await response.json();

                        if (response.ok) {
                            if (result.maxLimitReached) {
                                // Show sweet alert for maximum limit reached
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Maximum stock limit reached!',
                                });
                            } else {
                                // window.location.reload()
                                // $('#update').load('/cart #update > *');
                                // $('#subUpdate').load('/cart #subUpdate > *');
                                // $('#total').load('/cart #total > *');

                                // Update the UI
                                $.ajax({
                                    url: '/cart',
                                    type: 'GET',
                                    success: function (data) {
                                        $('#updateCart').html($(data).find('#updateCart').html());
                                        $('#total').html($(data).find('#total').html());
                                    }
                                });
                            }
                        } else {
                            console.error('Failed to increase product quantity');
                        }
                    } catch (error) {
                        console.error(error.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Something went wrong!',
                        });

                    }
                }
            </script> -->


            <!----- decrease product ----->

            <!-- <script>
                async function decrement(index, productId) {
                    try {
                        const response = await fetch(`/cart/decrease?productId=${productId}`, {
                            method: 'PUT'
                        });

                        const result = await response.json();

                        if (response.ok) {
                            if (result.minLimitReached) {
                                // Show sweet alert for minimum quantity reached
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'Minimum quantity reached!',
                                });
                            } else {
                                // window.location.reload()
                                // $('#update').load('/cart #update > *');
                                // $('#subUpdate').load('/cart #subUpdate > *');
                                // $('#total').load('/cart #total > *');
                                // Update the UI
                                $.ajax({
                                    url: '/cart',
                                    type: 'GET',
                                    success: function (data) {
                                        $('#updateCart').html($(data).find('#updateCart').html());
                                        $('#total').html($(data).find('#total').html());
                                    }
                                });
                            }
                        } else {
                            console.error('Failed to decrease product quantity');
                        }
                    } catch (error) {
                        console.error(error.message);
                        window.location.href = '/500'; // Redirect to error page
                    }
                }
            </script> -->



            <script>
                async function increment(productStock, index, productId) {
                    try {
                        const response = await fetch(`/cart/increase?productId=${productId}`, {
                            method: 'PUT'
                        });
            
                        const result = await response.json();
            
                        if (result.maxLimitReached) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Maximum stock limit reached!',
                            });
                        } else {
                              // Update the total items and grand total
                    document.getElementById('totalItems').textContent = result.totalItems;
                    document.getElementById('grandTotal').textContent = `INR ${result.grandTotal.toFixed(2)}`;
            
                    // Update each cart item
                    result.updatedCart.forEach((item, index) => {
                        document.getElementById(`productQuantity${index}`).value = item.productQuantity;
                        document.querySelector(`#cartProduct${index} .cart-item-actions .mb-2`).textContent = `INR ${item.totalCostPerProduct}`;
                    });
                        }
                    } catch (error) {
                        console.error(error.message);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Something went wrong!',
                        });
                    }
                }
            
                async function decrement(index, productId) {
                    try {
                        const response = await fetch(`/cart/decrease?productId=${productId}`, {
                            method: 'PUT'
                        });
            
                        const result = await response.json();
            
                        if (result.minLimitReached) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Minimum quantity reached!',
                            });
                        } else {
                              // Update the total items and grand total
                    document.getElementById('totalItems').textContent = result.totalItems;
                    document.getElementById('grandTotal').textContent = `INR ${result.grandTotal.toFixed(2)}`;
            
                    // Update each cart item
                    result.updatedCart.forEach((item, index) => {
                        document.getElementById(`productQuantity${index}`).value = item.productQuantity;
                        document.querySelector(`#cartProduct${index} .cart-item-actions .mb-2`).textContent = `INR ${item.totalCostPerProduct}`;
                    });
                        }
                    } catch (error) {
                        console.error(error.message);
                        window.location.href = '/500'; // Redirect to error page
                    }
                }
            
                // function updateCartUI(result) {
                //     // Update the total items and grand total
                //     document.getElementById('totalItems').textContent = result.totalItems;
                //     document.getElementById('grandTotal').textContent = `INR ${result.grandTotal.toFixed(2)}`;
            
                //     // Update each cart item
                //     result.updatedCart.forEach((item, index) => {
                //         document.getElementById(`productQuantity${index}`).value = item.productQuantity;
                //         document.querySelector(`#cartProduct${index} .cart-item-actions .mb-2`).textContent = `INR ${item.totalCostPerProduct}`;
                //     });
                // }
            </script> 




            <!----- proceed to checkout ----->
            <script>
                async function proceed(grandTotal) {
                    try {
                        let response = await fetch(`/cart/proceedCheckout?grandTotal=${grandTotal}`, {
                            method: 'POST'
                        });

                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        const result = await response.json();

                        if (result.success) {
                            console.log('proceed to checkout success');
                            window.location.href = '/checkout/address';
                        } else {
                            console.log('failed checkout proceed');
                        }
                    } catch (error) {
                        console.error('Fetch error: ', error);
                    }
                }
            </script>


    </body>